name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_BACKEND: microservices/backend
  ECR_REPOSITORY_PROXY: microservices/proxy
  ECS_CLUSTER: cloudguru-app-dev-cluster
  ECS_SERVICE: cloudguru-app-dev-service
  TERRAFORM_DIR: terraform/environments/dev

permissions:
  id-token: write
  contents: read

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          cd microservices/backend
          python -m pip install --upgrade pip
          pip install pytest pytest-cov flake8
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Lint with flake8
        run: |
          cd microservices/backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          cd microservices/backend
          pytest --cov=./ --cov-report=xml

  lint-docker:
    name: Lint Dockerfiles
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Lint Dockerfile Backend
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: microservices/backend/Dockerfile

      - name: Lint Dockerfile Proxy
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: microservices/proxy/Dockerfile

  lint-terraform:
    name: Lint Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Format
        run: terraform fmt -check -recursive

      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: terraform

  build-and-push:
    name: Build and Push Docker Images
    needs: [test, lint-docker, lint-terraform]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create ECR Repositories if they don't exist
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Create backend repository if it doesn't exist
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY_BACKEND || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY_BACKEND

          # Create proxy repository if it doesn't exist
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY_PROXY || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY_PROXY

      - name: Build, tag, and push backend image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd microservices
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:${{ github.sha }} -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest ./backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:${{ github.sha }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

      - name: Build, tag, and push proxy image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd microservices
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_PROXY:${{ github.sha }} -t $ECR_REGISTRY/$ECR_REPOSITORY_PROXY:latest ./proxy
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_PROXY:${{ github.sha }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_PROXY:latest

  terraform:
    name: Terraform Plan and Apply
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: |
          cd ${{ env.TERRAFORM_DIR }}
          terraform init

      - name: Clean up existing resources
        run: |
          chmod +x scripts/cleanup-resources.sh
          ./scripts/cleanup-resources.sh cloudguru-app dev ${{ env.AWS_REGION }}

      - name: Terraform Plan
        run: |
          cd ${{ env.TERRAFORM_DIR }}
          terraform plan -out=tfplan

      - name: Terraform Apply
        run: |
          cd ${{ env.TERRAFORM_DIR }}
          terraform apply -auto-approve tfplan

  deploy:
    name: Deploy to ECS
    needs: [terraform]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update ECS service
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment

      - name: Wait for service to stabilize
        run: |
          aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }}
