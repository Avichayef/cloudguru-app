name: Setup AWS Resources

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to set up (e.g., dev, staging, prod)'
        required: true
        default: 'dev'

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: cloudguru-app

permissions:
  contents: read

jobs:
  setup:
    name: Setup AWS Resources
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create OIDC Provider
        id: create-oidc
        run: |
          # Check if OIDC provider exists
          OIDC_PROVIDER_ARN=$(aws iam list-open-id-connect-providers --query "OpenIDConnectProviderList[?contains(Arn, 'token.actions.githubusercontent.com')].Arn" --output text || echo "")
          
          if [ -z "$OIDC_PROVIDER_ARN" ]; then
            echo "Creating OIDC provider..."
            OIDC_PROVIDER_ARN=$(aws iam create-open-id-connect-provider \
              --url "https://token.actions.githubusercontent.com" \
              --client-id-list "sts.amazonaws.com" \
              --thumbprint-list "6938fd4d98bab03faadb97b34396831e3780aea1" \
              --query "OpenIDConnectProviderArn" --output text)
            echo "Created OIDC provider: $OIDC_PROVIDER_ARN"
          else
            echo "OIDC provider already exists: $OIDC_PROVIDER_ARN"
          fi
          
          echo "oidc_provider_arn=$OIDC_PROVIDER_ARN" >> $GITHUB_OUTPUT

      - name: Create IAM Role
        id: create-role
        run: |
          ROLE_NAME="${{ env.PROJECT_NAME }}-${{ github.event.inputs.environment }}-github-actions-role"
          ROLE_EXISTS=$(aws iam get-role --role-name $ROLE_NAME --query "Role.RoleName" --output text 2>/dev/null || echo "")
          
          if [ -z "$ROLE_EXISTS" ]; then
            echo "Creating role $ROLE_NAME..."
            
            # Create trust policy document
            cat > /tmp/trust-policy.json << EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Federated": "${{ steps.create-oidc.outputs.oidc_provider_arn }}"
                },
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringEquals": {
                    "token.actions.githubusercontent.com:aud": "sts.amazonaws.com"
                  },
                  "StringLike": {
                    "token.actions.githubusercontent.com:sub": "repo:Avichayef/cloudguru-app:*"
                  }
                }
              }
            ]
          }
          EOF
            
            # Create role
            aws iam create-role \
              --role-name $ROLE_NAME \
              --assume-role-policy-document file:///tmp/trust-policy.json
            
            # Attach AdministratorAccess policy to the role
            aws iam attach-role-policy \
              --role-name $ROLE_NAME \
              --policy-arn arn:aws:iam::aws:policy/AdministratorAccess
            
            echo "Created role $ROLE_NAME with AdministratorAccess"
          else
            echo "Role $ROLE_NAME already exists"
          fi
          
          # Get the role ARN
          ROLE_ARN=$(aws iam get-role --role-name $ROLE_NAME --query "Role.Arn" --output text)
          echo "role_arn=$ROLE_ARN" >> $GITHUB_OUTPUT

      - name: Output Role ARN
        run: |
          echo "Role ARN: ${{ steps.create-role.outputs.role_arn }}"
          echo "Please add this ARN as a secret in your GitHub repository with the name AWS_ROLE_ARN"
